1 - Remocao do atributo PField.many
	O atributo e' atualmente utilizado para especificar quantas vezes a lista ira se repetir @Many(repeated=x). 
	Ele foi adicionado para permitir que elementos possam ser adicionados apos a posicao da lista, de uma forma 
	que quem leia a String saiba diferenciar onde termina a lista e onde comeca o proximo elemento. Porem, desde 
	que o Parser foi alterado para funcionar atrave's de posicoes especificadas (position=x), nao e' mais necessario 
	usar o many com repeated, visto que um proximo elemento da lista teria sua propria posicao exata ja especificada.
	
	O problema e' que devemos preencher o espaco entre o fim da lista e o proximo elemento, e esse espaco nao pode ser 
	preenchido simplesmente com " ", pois ele deve ser preenchido com o nullVaue dos elementos da lista, pois dessa 
	forma que ler sabera de que se trata de um elemento nulo e podera parar de iterar pela lista. caso contrario quem 
	lesse a string gerada poderia preencher uma lista com varios elementos vazios, o que seria indesejado.
	
	Uma solucao pensada e' que ao adicionar a lista, quando ela acabar, deve ser adicionado o nullValue dos valores da lista 
	ate' a posicao do proximo elemento. Para tanto, sera necessario saber qual e' a posicao do proximo elemento no momento 
	em que se popula a lista. E para tanto parece ser necessario realizar uma ordenacao dos PFields por position, permitindo 
	assim saber qual o proximo elemento e sua posicao.

2 - Tratamento de tipos
		
	[x] remover a factory FieldValuesFactory? posso usar o mesmo objeto para todos, nao faz sentido adicionar esse nivel de complexidade. mas ela nao evita nullpointer, 
	garantindo que sempre os metodos receberao sempre somente o que importa, e assim ninguem tentará mecher no que pode estar null?
		[x] nao. parece correto. http://stackoverflow.com/questions/15843645/how-would-i-overload-method-in-an-interface
		
	[ ] criar teste nullMustBreakTheList pra nulos dos tipos novos tambem, nao so de string. o atual ta no ParserFromTextNullsTest.
		um tipo primitivo que da bind null, da break na list? alias um tipo primitivo tem como dar bind null??
	
	[ ] em ParserFromTextNullsTest e ParserToTextNullsTest criar mais testes para os outros tipos, alem de Integer e int
	
	[ ] fazer controle de exception em cada convert() do typedefinitions. logar.
	
	[ ] fazer os testes para controle de erros nas conversoes.
	
	[ ] pensar sobre refatorar typeDefinitions: estou usando heranca. pensar sobre interface + composicao. observar que 
	no toText do tipo STRING por exemplo, eu converto pra Object (pois o pai recebe Object) e simplesmente converto pra 
	String de novo. nao faz sentido pra ele. é como um empty method.
		
	
3 - Pensar sobre alteracao no ParseException
	Talvez seja melhor permitir que a ParseException tenha um construtor a mais que receba um Throwable para aninhar a 
	exception original que a causou. Atualmente se ocorre um ClassCastException por exemplo, eu dou um catch nela e 
	lanco uma ParseException com mensagem apropriada. Mas talvez seja melhor, alem disso, deixar a exception original 
	como root cause da ParseException, pra facilitar identificacao do problema caso ocorra.
	
4 - dependency injection
	http://stackoverflow.com/questions/25396614/does-cdi-work-for-regular-java-application
	https://randling.wordpress.com/2011/08/15/cdi-in-java-se/
	
5 - nullfillvalue de string completa. o date por exemplo poderia ser um "0001-01-01" algo assim, que o sat retorna quando nao tem.